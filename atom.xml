<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://locam-cyj.github.io/yongjuns-hub/atom.xml" rel="self"/>
  
  <link href="https://locam-cyj.github.io/yongjuns-hub/"/>
  <updated>2023-03-21T17:50:56.265Z</updated>
  <id>https://locam-cyj.github.io/yongjuns-hub/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分查找</title>
    <link href="https://locam-cyj.github.io/yongjuns-hub/2023/03/21/algorithm/"/>
    <id>https://locam-cyj.github.io/yongjuns-hub/2023/03/21/algorithm/</id>
    <published>2023-03-21T15:12:59.000Z</published>
    <updated>2023-03-21T17:50:56.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于二分查找"><a href="#关于二分查找" class="headerlink" title="关于二分查找"></a>关于二分查找</h2><ul><li>二分查找的实现思想可谓是十分简单，它的查找过程如下：<blockquote><p>首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。–摘自<a class="link"   href="https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618" >百度百科 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li>我们先给出比较容易理解的伪代码以及Java和python3和JavaScript实现：</li></ul><div class="tabs" id="tab-first"><ul class="nav-tabs"><li class="tab active"><a class="#first-1">伪代码</a></li><li class="tab"><a class="#first-2">Java实现</a></li><li class="tab"><a class="#first-3">python3实现</a></li><li class="tab"><a class="#first-4">JavaScript实现</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-1"><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int binarySearch(ary, target)&#123;</span><br><span class="line">    left = 0, right = ary.length - 1; // 初始左边界为下标0，右边界为下标数组.长度 - 1(即数组最后一个元素)</span><br><span class="line">    while(left &lt;= right)&#123;             // 当左边界和右边界交叉时退出循环</span><br><span class="line">        mid = (left + right) / 2;     // 中间位置</span><br><span class="line">        if(ary[mid] &lt; target)&#123;        // 当中间值小于目标值时，所以下一步要到(mid, right]中去找</span><br><span class="line">            left = mid + 1;           // 因此把left更新为mid + 1</span><br><span class="line">        &#125;</span><br><span class="line">        else if(ary[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - 1;          // 同理，若中间值大于目标值，则将right更新为mid - 1</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return mid;               // 当mid处的值既不大于也不小于target的时候，则找到目标值，返回下标mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;                        // 循环执行完毕还没找到，则返回-1表示没找到目标值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-2"><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] ary, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = ary.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;    <span class="comment">//这么写可以防止l+r对于int类型溢出</span></span><br><span class="line">        <span class="keyword">if</span>(ary[mid] &lt; target)&#123;        </span><br><span class="line">            left = mid + <span class="number">1</span>;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ary[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;          </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-3"><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bin_Search</span>(<span class="params">ary: <span class="type">List</span>[], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    l, r = <span class="number">0</span>, <span class="built_in">len</span>(ary)</span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = (l + r) // <span class="number">2</span>          <span class="comment"># python3的int理论上讲可以无限大，不需要担心溢出</span></span><br><span class="line">        <span class="keyword">if</span> ary[mid] &lt; target:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> ary[mid] &gt; target:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-pane" id="first-4"><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">ary</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">binarySearch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span>, r = ary.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">        <span class="keyword">let</span> mid = l + <span class="title class_">Math</span>.<span class="title function_">floor</span>((r - l) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(ary[mid] &lt; target)&#123;        </span><br><span class="line">            left = mid + <span class="number">1</span>;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ary[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;          </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div></div><ul><li>因为二分查找每次查找都会使查找长度减半，第一次为n，第二次为n&#x2F;2，第三次为n&#x2F;2^2，…n&#x2F;2^k，…，其中k为循环次数，令n&#x2F;^k&#x3D;1，则k&#x3D;log2n，所以二分查找时间复杂度为O(logn)。</li><li>由于使用了常数级辅助空间(l，r和mid)，所以空间复杂度为O(1)。</li></ul><h3 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h3><ul><li>关于循环不变量：上面while循环中的条件是*l&lt;&#x3D;r*，也就是说我们的查找区间是一个闭区间[l,r]，在整个循环过程中都是如此(循环不变)，所以l和r都可以取到，因此l&#x3D;r时是有意义的；当mid处的值小于target时，由于ary[mid]是有意义的，所以下次循环我们比较的区间变为[mid + 1, r]而不是[mid, r];当ary[mid]&gt;target时同理。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>到这里是不是对于二分查找有了更清晰的理解了呢，可以自己在本地或者推荐到<a class="link"   href="https://c.runoob.com/" >菜鸟教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的在线测试环境中用几个例子测试一下。</li><li>一般来说，绝大多数情况下使用二分查找需要数组有序，特殊情况可以将数组用其他方法指标分类时可以无序。</li><li>二分查找的区间还可以写为(l,r]，这种写法的循环条件以及判断条件和更新语句怎么写就可参照上面的分析方法去做，具体此处不再赘述。</li><li>后续会更新具体的一道二分查找变体的题目，敬请期待。</li></ul>]]></content>
    
    
    <summary type="html">二分查找虽简单但老是写不对？原因在这里！</summary>
    
    
    
    <category term="Algorithm" scheme="https://locam-cyj.github.io/yongjuns-hub/categories/Algorithm/"/>
    
    
    <category term="BinarySearch" scheme="https://locam-cyj.github.io/yongjuns-hub/tags/BinarySearch/"/>
    
  </entry>
  
  <entry>
    <title>test-page</title>
    <link href="https://locam-cyj.github.io/yongjuns-hub/2023/03/13/test-page/"/>
    <id>https://locam-cyj.github.io/yongjuns-hub/2023/03/13/test-page/</id>
    <published>2023-03-13T15:15:46.000Z</published>
    <updated>2023-03-13T15:51:09.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><ul><li>内容</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ol><li>内容</li><li>内容</li></ol><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><blockquote><p>区块内容<br>区块内容</p></blockquote><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><ul><li><em>python代码</em><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
    
    
    <summary type="html">这是文章摘要</summary>
    
    
    
    <category term="Test" scheme="https://locam-cyj.github.io/yongjuns-hub/categories/Test/"/>
    
    
    <category term="test" scheme="https://locam-cyj.github.io/yongjuns-hub/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://locam-cyj.github.io/yongjuns-hub/2023/03/01/hello-world/"/>
    <id>https://locam-cyj.github.io/yongjuns-hub/2023/03/01/hello-world/</id>
    <published>2023-03-01T15:31:56.156Z</published>
    <updated>2023-02-27T13:29:53.097Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo &lt;i class=&quot;fa-regular fa-arrow-up-right-from-square fa-sm&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is yo</summary>
      
    
    
    
    
  </entry>
  
</feed>
